service: feedbin-to-pinboard

plugins:
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-offline-scheduler

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-west-1
  profile: default
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    ACCOUNTID: '#{AWS::AccountId}'
    idQueue: ${self:service}-${self:provider.stage}-id-queue
    idQueueDLQ: ${self:service}-${self:provider.stage}-id-queue-dlq
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sqs:*"
package:
  include:
    - utils/**
functions:
  get_ids:
    handler: handler.getIds
    # events:
    #   - schedule:
    #       name: ${self:provider.stage}.check-feedbin
    #       description: 'Checks the feedbin url every 5 minutes'
    #       rate: rate(5 minutes)
  get_items:
    handler: handler.getItems
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:#{AWS::AccountId}:${self:service}-${self:provider.stage}-id-queue
          batchSize: 1

resources:
  Resources:
   # Create our 'id' SQS queue
    idQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-id-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - idQueueDLQ
            - Arn
          maxReceiveCount: 3

    # Create our 'id' Dead Letter Queue SQS queue
    idQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-id-queue-dlq

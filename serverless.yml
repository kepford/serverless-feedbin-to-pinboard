service: feedbin-to-pinboard

plugins:
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-offline-scheduler

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-west-1
  profile: default
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    ACCOUNTID: '#{AWS::AccountId}'
    idQueue: ${self:service}-${self:provider.stage}-id-queue
    idQueueDLQ: ${self:service}-${self:provider.stage}-id-queue-dlq
    LAMBDA_SCHEDULE: ${self:custom.environment.LAMBDA_SCHEDULE}
    FEEDBIN_URL: ${self:custom.environment.FEEDBIN_URL}
    FEEDBIN_USERNAME: ${self:custom.environment.FEEDBIN_USERNAME}
    FEEDBIN_PASSWORD: ${self:custom.environment.FEEDBIN_PASSWORD}
    PINBOARD_USER: ${self:custom.environment.PINBOARD_USER}
    PINBOARD_APITOKEN: ${self:custom.environment.PINBOARD_APITOKEN}
    PINBOARD_TAGS: ${self:custom.environment.PINBOARD_TAGS}
    PINBOARD_TOREAD: ${self:custom.environment.PINBOARD_TOREAD}
    PINBOARD_SHARED: ${self:custom.environment.PINBOARD_SHARED}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sqs:*"
package:
  include:
    - utils/**
    - functions/**
functions:
  getIds:
    handler: functions/getIds.getIds
    events:
      - schedule:
          name: ${self:provider.stage}.check-feedbin
          description: 'Checks the feedbin url periodically'
          rate: rate(${self:provider.environment.LAMBDA_SCHEDULE})
  bookmarkItems:
    handler: functions/bookmarkItems.bookmarkItems
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:#{AWS::AccountId}:${self:service}-${self:provider.stage}-id-queue
          batchSize: 1

resources:
  Resources:
   # Create our 'id' SQS queue
    idQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-id-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - idQueueDLQ
            - Arn
          maxReceiveCount: 3

    # Create our 'id' Dead Letter Queue SQS queue
    idQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-id-queue-dlq
